import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from st_aggrid import AgGrid
from st_aggrid.grid_options_builder import GridOptionsBuilder
import io

# URL n8n Webhook
N8N_WEBHOOK_URL = "https://spot2d.app.n8n.cloud/webhook-test/93ad63a0-8bab-4cf1-b446-f71ae3f988fa"

st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞")
st.subheader("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", "")

if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
    if user_input:
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç... ‚è≥"):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Webhook
                response = requests.post(N8N_WEBHOOK_URL, json={"query": user_input})
                response.raise_for_status()

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = response.json()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª—é—á "data"
                if "data" in result and isinstance(result["data"], list) and len(result["data"]) > 0:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É CSV –∏–∑ JSON
                    csv_data = result["data"][0]["data"]

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É CSV –≤ DataFrame
                    df = pd.read_csv(io.StringIO(csv_data), sep=";", engine="python")

                    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ float
                    for col in df.columns[1:]:
                        df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    numeric_columns = df.select_dtypes(include=["number"]).columns

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –ø–µ—Ä–≤–æ–º—É —á–∏—Å–ª–æ–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É
                    if len(numeric_columns) > 0:
                        df = df.sort_values(by=numeric_columns[0], ascending=False)

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    total_row = {col: df[col].sum() if col in numeric_columns else "–ò—Ç–æ–≥–æ" for col in df.columns}
                    total_row = {key: float(value) if isinstance(value, (int, float)) else value for key, value in total_row.items()}

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    selected_metrics = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", numeric_columns, default=[numeric_columns[0]] if len(numeric_columns) > 0 else []
                    )

                    # –°–æ–∑–¥–∞–µ–º Dashboard —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
                    col1, col2 = st.columns(2)

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    with col1:
                        st.subheader("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
                        gb = GridOptionsBuilder.from_dataframe(df)
                        gb.configure_pagination(paginationAutoPageSize=True)
                        gb.configure_default_column(editable=False, groupable=True, sortable=True)
                        gridOptions = gb.build()
                        gridOptions["suppressAggFuncInHeader"] = True
                        gridOptions["pinnedBottomRowData"] = [total_row]
                        AgGrid(df, gridOptions=gridOptions, height=500, theme="streamlit")

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                    with col2:
                        st.subheader("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
                        for metric in selected_metrics:
                            fig = px.bar(
                                df[:-1],  # –ò—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                                x=df.columns[0],
                                y=metric,
                                labels={df.columns[0]: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", metric: "–ó–Ω–∞—á–µ–Ω–∏—è"},
                                title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ {metric}",
                                text_auto=True,
                            )
                            st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã–µ.")
            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ n8n: {str(e)}")
            except Exception as e:
                st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!")
